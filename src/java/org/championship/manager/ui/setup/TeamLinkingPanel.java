/*
 * TeamLinkingPanel.java
 *
 * Created on 1. Januar 2006, 20:25
 */

package org.championship.manager.ui.setup;

import org.jdesktop.layout.GroupLayout;

import javax.swing.*;
import java.util.Vector;
import java.util.Set;
import java.util.LinkedHashSet;

import org.championship.manager.domain.Championship;
import org.championship.manager.domain.Linking;
import org.championship.manager.util.VectorUtils;
import org.championship.manager.MainFrame;

/**
 * @author Roman Georg Rädle
 */
public class TeamLinkingPanel extends javax.swing.JPanel {

    private MainFrame mainFrame;

    private JLabel[] labels;
    private JComboBox[] comboBoxes1;
    private JComboBox[] comboBoxes2;

    private String gameType;

    private javax.swing.JPanel linkingP;
    private javax.swing.JScrollPane linkingSP;

    /**
     * Creates new form TeamLinkingPanel
     */
    public TeamLinkingPanel(MainFrame mainFrame, String gameType, Integer size, Integer start) {
        initComponents();
        initLayout();

        this.mainFrame = mainFrame;

        this.labels = new JLabel[size];
        this.comboBoxes1 = new JComboBox[size];
        this.comboBoxes2 = new JComboBox[size];

        this.gameType = gameType;

        for (int i = 0; i < size; i++) {
            labels[i] = new JLabel(String.valueOf(start++));
        }

        if (mainFrame != null) {
            Championship championship = mainFrame.getChampionship();

            Vector content = null;
            if ("intermediate_stage".equals(gameType)) {
                content = VectorUtils.collectionToVector(championship.getIntermediateStageTeamDefinitions());
            }
            else if ("quarter_final".equals(gameType)) {
                content = VectorUtils.collectionToVector(championship.getQuarterFinalTeamDefinitions());
            }
            else if ("semi_final".equals(gameType)) {
                content = VectorUtils.collectionToVector(championship.getSemiFinalTeamDefinitions());
            }
            else if ("third_place_game".equals(gameType)) {
                content = VectorUtils.collectionToVector(championship.getThirdPlaceGameTeamDefinitions());
            }
            else if ("final".equals(gameType)) {
                content = VectorUtils.collectionToVector(championship.getFinalTeamDefinitions());
            }

            for (int i = 0; i < size; i++) {
                comboBoxes1[i] = new JComboBox(content);
            }

            for (int i = 0; i < size; i++) {
                comboBoxes2[i] = new JComboBox(content);
            }

            initDynamicLayout();
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        linkingSP = new javax.swing.JScrollPane();
        linkingP = new javax.swing.JPanel();
    }

    private void initLayout() {
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(linkingSP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(linkingSP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                        .addContainerGap())
        );
    }

    private void initDynamicLayout() {

        Championship championship = mainFrame.getChampionship();

        linkingP.removeAll();

        GroupLayout.ParallelGroup parallelGroup;
        GroupLayout.SequentialGroup sequentialGroup;

        org.jdesktop.layout.GroupLayout linkingPLayout = new org.jdesktop.layout.GroupLayout(linkingP);
        linkingP.setLayout(linkingPLayout);
        linkingPLayout.setHorizontalGroup(
                linkingPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, linkingPLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(parallelGroup = linkingPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false))
                        .addContainerGap(11, Short.MAX_VALUE)));

        linkingPLayout.setVerticalGroup(
                linkingPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, sequentialGroup = linkingPLayout.createSequentialGroup()));
        sequentialGroup.addContainerGap();

        int i = 0;
        int count = labels.length;
        for (JLabel label : labels) {

            JComboBox box1 = comboBoxes1[i];
            JComboBox box2 = comboBoxes2[i];

            Linking linking = championship.getLinking(Integer.parseInt(label.getText()));
            if (linking != null) {
                box1.setSelectedItem(linking.getLink1());
                box2.setSelectedItem(linking.getLink2());
            }

            i++;

            parallelGroup.add(org.jdesktop.layout.GroupLayout.TRAILING, linkingPLayout.createSequentialGroup()
                    .add(label)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(box1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(box2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE));

            sequentialGroup.add(linkingPLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(label)
                    .add(box1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(box2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE));

            if (i < count) {
                sequentialGroup.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED);
            }

            linkingPLayout.linkSize(new java.awt.Component[]{box1, box2}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
        }

        sequentialGroup.addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE);

        linkingSP.setViewportView(linkingP);
    }

    public void initValues() {


    }

    /**
     *
     * @return
     */
    public Set<Linking> getLinkings() {

        Set<Linking> linkings = new LinkedHashSet<Linking>();

        int i = 0;
        Linking linking;
        for (JLabel label : labels) {
            linking = new Linking();

            linking.setGamePosition(Integer.parseInt(label.getText()));
            linking.setGameType(gameType);
            linking.setLink1(comboBoxes1[i].getSelectedItem().toString());
            linking.setLink2(comboBoxes2[i].getSelectedItem().toString());
            i++;

            linkings.add(linking);
        }

        return linkings;
    }
}